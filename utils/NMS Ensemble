#NMS Ensemble


import pandas as pd
from pycocotools.coco import COCO
import numpy as np

# NMS에 사용할 CSV 파일 경로
submission_files = [
    '/content/Ensemble/1.csv',
    '/content/Ensemble/2.csv',
    '/content/Ensemble/3.csv',
    '/content/Ensemble/4.csv',
    '/content/Ensemble/5.csv'
]

# COCO 주석 로드
annotation = '/content/dataset/test.json'
coco = COCO(annotation)

# 이미지 ID를 추출하기 위한 함수
def extract_image_id(file_name):
    return int(file_name.split('/')[-1].split('.')[0])

# IoU 계산 함수
def compute_iou(box, boxes):
    x1 = np.maximum(box[0], boxes[:, 0])
    y1 = np.maximum(box[1], boxes[:, 1])
    x2 = np.minimum(box[2], boxes[:, 2])
    y2 = np.minimum(box[3], boxes[:, 3])

    intersection_area = np.maximum(0, x2 - x1) * np.maximum(0, y2 - y1)
    box_area = (box[2] - box[0]) * (box[3] - box[1])
    boxes_area = (boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1])

    iou = intersection_area / (box_area + boxes_area - intersection_area + 1e-6)  # To avoid division by zero
    return iou

# NMS 수행 함수
def perform_nms(group_files, image_ids, coco, iou_threshold=0.5):
    submission_df = [pd.read_csv(file) for file in group_files]

    prediction_strings = []
    file_names = []

    for image_id in image_ids:
        image_id_int = extract_image_id(image_id)
        prediction_string = ''
        boxes_list = []
        scores_list = []
        labels_list = []

        image_info = coco.loadImgs(image_id_int)
        if not image_info:
            print(f"Image ID {image_id_int}는 데이터셋에 없습니다.")
            continue

        image_info = image_info[0]

        for df in submission_df:
            predict_string = df[df['image_id'] == image_id]['PredictionString'].tolist()
            if not predict_string:
                continue

            predict_string = predict_string[0]
            predict_list = str(predict_string).split()

            if len(predict_list) < 6:
                continue

            predict_list = np.reshape(predict_list, (-1, 6))

            for i in range(predict_list.shape[0]):
                box = predict_list[i, 2:6].astype(float).tolist()
                box[0] /= image_info['width']
                box[1] /= image_info['height']
                box[2] /= image_info['width']
                box[3] /= image_info['height']
                boxes_list.append(box)
                scores_list.append(float(predict_list[i, 1]))  # 각 박스의 점수를 개별적으로 추가
                labels_list.append(int(predict_list[i, 0]))  # 각 박스의 레이블을 개별적으로 추가

        # NMS 수행
        if len(boxes_list) > 0:
            boxes_array = np.array(boxes_list)
            scores_array = np.array(scores_list)
            labels_array = np.array(labels_list)

            indices = np.argsort(scores_array)[::-1]
            selected_indices = []
            while len(indices) > 0:
                current_index = indices[0]
                selected_indices.append(current_index)
                remaining_indices = indices[1:]

                # Calculate IoU
                iou = compute_iou(boxes_array[current_index], boxes_array[remaining_indices])
                indices = remaining_indices[iou < iou_threshold]

            for index in selected_indices:
                box = boxes_array[index]
                score = scores_array[index]
                label = labels_array[index]
                prediction_string += f"{label} {score:.6f} {box[0] * image_info['width']} {box[1] * image_info['height']} {box[2] * image_info['width']} {box[3] * image_info['height']} "

        prediction_strings.append(prediction_string.strip())
        file_names.append(image_id)

    return pd.DataFrame({'PredictionString': prediction_strings, 'image_id': file_names})

# 이미지 ID 추출
all_image_ids = pd.read_csv(submission_files[0])['image_id'].tolist()

# NMS 수행
result_df = perform_nms(submission_files, all_image_ids, coco)

# 결과를 CSV 파일로 저장
result_df.to_csv('/content/Ensemble/NMS_result.csv', index=False)
print("NMS results saved to /content/Ensemble/NMS_result.csv")
